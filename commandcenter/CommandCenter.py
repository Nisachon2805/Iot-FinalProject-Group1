# -*- coding: utf-8 -*-
"""commandCenter.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Pj-PxZVwQDLlG0fYbmBy-rwDICMjivko
"""

#!pip3 install influxdb-client
#!pip3 install paho-mqtt

import influxdb_client
from influxdb_client.client.write_api import SYNCHRONOUS
import paho.mqtt.client as mqtt
import time

# MQTT broker config
MQTT_BROKER_URL = "192.168.154.229"
MQTT_PUBLISH_TOPIC = "@msg/cb"
print("connecting to MQTT Broker", MQTT_BROKER_URL)
mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)
mqttc.connect(MQTT_BROKER_URL,1883)

bucket = "consumer"
org = "heart0388"
token = "TzPh2XmRUCxtsayLqtD_D2zKubHT_66j7JQ_L6Cy0MbMSJkUEOCw7cBsEBSQR2Lwpj2Ymq552FDJXrPRoVPvZA=="
# Store the URL of my InfluxDB instance
url="https://iot-group1-service1.iotcloudserve.net/"

influx_client = influxdb_client.InfluxDBClient(
    url=url,
    token=token,
    org=org
)

# Subscribe to a topic
mqttc.subscribe(MQTT_PUBLISH_TOPIC)

def on_connect(client, userdata, flags, rc, properties):
    """ The callback for when the client connects to the broker."""
    print("Connected with result code "+str(rc))



# Query script
while True:
    query_api = influx_client.query_api()
    query = 'from(bucket:"consumer")\
    |> range(start: -1m)\
    |> filter(fn:(r) => r._measurement == "sensor_data")\
    |> filter(fn:(r) => r._field == "Temp")'
    result = query_api.query(org=org, query=query)
    for table in result:
        for record in table.records:
            #print((record.get_field(), record.get_value()))
            if record.get_value() < 35:
                mqttc.publish(MQTT_PUBLISH_TOPIC ,str(record.get_value())+" is cold")
            else: mqttc.publish(MQTT_PUBLISH_TOPIC ,str(record.get_value())+" is hot")
    ## MQTT logic - Register callbacks and start MQTT client
    mqttc.on_connect = on_connect
    time.sleep(60) # sleep for 5 min
    #mqttc.loop_forever()
